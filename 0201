#자릿수 더하기

a = list(map(int, input().split()))
n = int(a[0])

def sum_digits(n):
    if n < 10 :
        return n
    
    return (n % 10) + sum_digits(n // 10) 

print(sum_digits(n))

------------------------

# 소수 나열하기
counter = 0

for n in range(2, 1001):
    for i in range(2, n):
        counter += 1
        if n % i == 0:
            break
    else:
        print(n)
print(f'나눗셈을 실행한 횟수 : {counter}')

--------------------------

from typing import Any

class FixedStack:
    class Empty(Exception): #비어 있는 픽스드스택에 팝 또는 픽 할때 내보내는 예외처리
        pass
    class Full(Exception): #가득 찬 픽스드스택에 푸시할때 내보내는 예외처리
        pass 
    
    def __init__(self, capacity: int = 256) -> None: #스택 초기화
        self.stk = [None] * capacity #스택 본체
        self.capacity = capacity #스택 크기
        self.ptr = 0 #스택포인터
        
    def is_empty(self) -> bool: #스택이 비어 있는지 판단
        return self.ptr <= 0
    def is_full(self) -> bool:
        return self.ptr >= self.capacity
    def push(self, value: Any) -> None: #스택에 밸류를 푸시
        if self.is_full():
            raise FixedStrack.Full
        self.stk[self.ptr] = value
        self.prt += 1
        
    def pop(self) -> Any: #스택에서 데이터를 팝
        if self.is_empty():
            raise FixedStack.Empty
        self.prt -= 1
        return self.stk[self.ptr]
    
    def peek(self) -> Any: #스택에서 데이터를 픽
        if self.is_empty():
            raise FixedStack.Empty
        return self.stk[self.prt - 1]
    
    def clear(self) -> None: #스택을 비움
        self.prt = 0
    
    def find(self, value: Any) -> Any: #스택에서 밸류를 찾아 인덱스를 반환 없으면 -1반환
        for i in range(self.ptr - 1, -1, -1): #꼭대기부터 선형 검색
            if self.stk[i] == value:
                return i
        return -1
    
    def count(self, value: Any) -> bool:
        c = 0
        for i in range(self.ptr): #바닥부터 선형검색
            if self.stk[i] == value: #검색 성공
                c += 1
            return c
    def dump(self) -> None: #덤프(스택안의 모든 데이터를 바닥부터 꼭대기 순으로 출력)
        if self.is_empty(): #스택이 비어있음
            print('스택이 비어있습니다')
        else:
            print(self.stk[:self.ptr])
