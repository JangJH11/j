홀수만 더하기

aa = input()
num = list(map(int, input().split()))
nums = 0

for i in num:
    if i%2 == 1:
        nums = nums + i
        
print('#1 {}'.format(nums))

num2 = list(map(int, input().split()))
nums2 = 0

for i in num2:
    if i%2 == 1:
        nums2 = nums2 + i
        
print('#2 {}'.format(nums2))

num3 = list(map(int, input().split()))
nums3 = 0

for i in num3:
    if i%2 == 1:
        nums3 = nums3 + i
        
print('#3 {}'.format(nums3))

----------------------------------

class House:
    def __init__(self, location, house_type, deal_type, price, completion_year):
        self.location = location
        self.house_type = house_type
        self.deal_type = deal_type
        self.price = price
        self.completion_year = completion_year
        
    def show_detail(self):
        print(self.location, self.house_type, self.deal_type\
            , self.price, self.completion_year)

houses = []
house1 = House('강남', '아파트', '매매', '10억', '2010년')
house2 = House('마포', '오피스텔', '전세', '5억', '2007년')
house3 = House('송파', '빌라', '월세', '500/50', '2000년')
houses.append(house1)
houses.append(house2)
houses.append(house3)

print('총 {0}  대의 매물이 있습니다'.format(len(houses)))
for house in houses:
    house.show_detail()

--------------------------------------

class SoldOutError(Exception):
    pass

chicken = 10
waiting = 1
while(True):
    try:
        print('[남은 치킨 : {0}]'.format(chicken))
        order = int(input('치킨 몇마리 주문하시겠습니까?'))
        if order > chicken:
            print('재료가 부족합니다')
        elif order <= 0:
            raise ValueError
        else:
            print('[대기번호 {0}] {1} 마리 주문이 완료 되었습니다'\
                .format(waiting, order))
            waiting += 1
            chicken -= order
        if chicken == 0:
            raise SoldOutError
    except ValueError:
        print('잘못된 값을 입력함')
    except SoldOutError:
        print('재고가 소진되었습니다')
        break
